						MODULE -8 WORKING WITH NUMPY (PYTHON)

1.How to creating a (3*3) identity matrix with float data type?
import numpy as np
x = np.identity((3) , dtype = float)
print(x)
[[1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]]

2.Create a 1D Array with Random Values between 0 and 1. 
import numpy as np
x = np.random.rand(5)
print(x)
[0.15065384 0.31624998 0.95730568 0.51449892 0.39468895]

3.Create a 2D Array with Random Integer Values.
import numpy as np
x = np.random.randint(1,100,(3,4))
print(x)
[[ 9 63 90 82]
 [51  2 35 18]
 [38  3 50 43]]

4.Creating an Array Using a Custom Function.
import numpy as np
def create_array(x,y):
    return x+y
shape =(3,3)
new_array = np.fromfunction(lambda i,j: create_array(i,j) , shape, dtype= int)
print(new_array)
[[0 1 2]
 [1 2 3]
 [2 3 4]]

5.Reshaping a 1D Array into a 2D Array 
x = np.array([1,2,3,11,12,12,45,67,77]).reshape(3,3)
print(x)
[[ 1  2  3]
 [11 12 12]
 [45 67 77]]

6.How to Creating a 3x3 Array of Ones? 
x = np.ones((3,3) , dtype = int)
print(x)
[[1 1 1]
 [1 1 1]
 [1 1 1]]

7. How to get the common items between two pythons NumPy? 
a = np. array ([1,2,3,2,3,4,3,4,5,6]) 
b = np. array ([7,2,10,2,7,4,9,4,9,8]) 
common_elements = np.intersect1d(a,b)
print(common_elements)
[2 4]

8.  From array a remove all items present in array b Input: 
a = np. array ([1,2,3,4,5]) 
b = np. array ([5,6,7,8,9])
result = np.setdiff1d(a,b)
print(result)
[1,2,3,4]

9. Limit the number of items printed in python NumPy array a to a maximum of 6 elements.
x = np.arange(15)
np.set_printoptions(threshold = 6)
print(x)
[ 0  1  2 ... 12 13 14]

10. Drop all nan values from a 1D NumPy.
x = np. array ([1,2,3, np.nan,5,6,7, np.nan]) 
print(x[~np.isnan(x)])
[1. 2. 3. 5. 6. 7.]

11. Create a 1D NumPy array of the first 20 natural numbers and a 2D NumPy array of shape (4, 5) with values ranging from 1 to 20. 
x = np.arange(1,21)
print(x)
[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20]

y = x.reshape(4,5)
print(y)
[[ 1  2  3  4  5]
 [ 6  7  8  9 10]
 [11 12 13 14 15]
 [16 17 18 19 20]]

12. Given a 3D NumPy array of shape (2, 3, 4), find its shape, size, number of dimensions, and data type. Change its data type to float64 and verify 
the change. 
x = np.array(
    [[[1,2,3,4],
    [10,20,33,44],
    [100,101,1001,1112]],

     [[12,21,32,41],
    [101,210,323,414],
    [1100,1201,12001,11112]]] )
print(x.shape)
(2,3,4)
print(x.size)
24
print(x.ndim)
3
print(x.dtype)
int64

x = np.array(
    [[[1,2,3,4],
    [10,20,33,44],
    [100,101,1001,1112]],

     [[12,21,32,41],
    [101,210,323,414],
    [1100,1201,12001,11112]]]).astype(float)
print(x.dtype)
float64

13.Reshape a 1D array of 12 elements into a 3x4 2D array and then flatten it back into a 1D array using ravel (). Verify that the flattened array 
matches the original.
x = np.arange(1,25,2).reshape(3,4)
y = np.ravel(x)
print(y)
[ 1  3  5  7  9 11 13 15 17 19 21 23]

14. Given two arrays, a = np. array ([1, 2, 3]) and b = np. array ([4, 5, 6]), perform element-wise addition, subtraction, multiplication, and 
division. Explain the behavior when dividing by zero.
a = np.array([1,2,3])
b = np.array([4,5,6])
addition = a + b
print(addition)
[5 7 9]
subtraction = a - b
print(subtraction)
[-3 -3 -3]
multiply = a*b
print(multiply)
[ 4 10 18]
divide = a/b
print(divide)  
[0.25 0.4  0.5 ]

a = np.array([-1,0,2])
b = np.array([0,0,1])
divide = a/b
print(divide)
[-inf  nan   2.]

15.  Create a 2D array of shape (3, 1) and a 1D array of length 3. Perform element-wise addition using broadcasting. Explain how broadcasting rules apply in this scenario. 
import numpy as np
x = np.random.randint(1,50,(3,1))
y = np.arange(3)
print(x,"\n",y)
x1 = np.broadcast_to(x,(3,3))
y1 = np.broadcast_to(y,(3,3))
z = x1 + y1
print(z)
[[45]
 [20]
 [14]] 
 [0 1 2]

[[45 46 47]
 [20 21 22]
 [14 15 16]]

Here first of all array x is broadcast to 3*3 matrix x1 and then array y is broadcast to 3*3 matrix y1.
so array x and y  is streched to 3*3 matrix and then we do the addition of both arrays x1 and y1.

16. Generate a random 2D array of integers between 0 and 10. Use conditional operators to create a Boolean mask identifying elements greater than 
5. Replace all elements greater than 5 with the value 5. 
x = np.random.randint(1,10,(2,5))
print(x)
[[7 9 4 3 5]
 [8 1 1 4 7]]
mask = x > 5
print(mask)
[[ True  True False False False]
 [ True False False False  True]]
x[mask] = 5
print(x)
[[5 5 4 3 5]
 [5 1 1 4 5]]

17. : Given a 4x4 array of random integers, use indexing and slicing 
to extract: 
o The entire second row 
o The last column 
o The subarray consisting of the first two rows and first two column
x = np.random.randint(1,50,(4,4))
print(x)
[[28 14 24 31]
 [27 14 24  9]
 [41 47  2 16]
 [45 11 17 40
]]
print(x[1])
[27 14 24  9]
print(x[ :,3])
[31  9 16 40]
print(x[:2,:2])
[[28 14]
 [27 14]]

18. Describe a practical example where NumPy can be used in EDA, AI, ML, and DL, and implement a NumPy solution for a simple task in each area. 
# example of EDA
x = np.array([1,2,3,4,11,2,11,22,33,44,1,56,778])
mean = np.mean(x)
median = np.median(x)
std_dev = np.std(x)
variance = np.var(x)
print(f' the mean is : {mean}','\n',f'the median is : {median}','\n',f'the standard deviation is : {std_dev}','\n',f'the variance is :{variance}')
 the mean is : 74.46153846153847 
 the median is : 11.0 
 the standard deviation is : 203.83387481159764 
 the variance is :41548.248520710054

# Example of AI
x = np.array([1,2,3,4,11,2,11,22,33,44,1,56,778])
max_value = np.max(x)
min_value = np.min(x)
result = (x - min_value)/(max_value - min_value)
print(f'Normalized features is : {result}')
Normalized features is : [0.         0.001287   0.002574   0.003861   0.01287001 0.001287
 0.01287001 0.02702703 0.04118404 0.05534106 0.         0.07078507
 1.        ]

# Example of DL
a = np.array([-1,0,1,2,3,-4,5])
def relu(x):
    return np.maximum(0,x)
output = relu(a)
print(output)
[0 0 1 2 3 0 5]


19. Create a random 4x4 matrix and use NumPy to compute its eigenvalues and eigenvectors. Verify the eigenvalues by reconstructing the matrix.
x = np.random.randint(1,20,(4,4))
print(f'The matrix is :{x}')
The matrix is :[[18 13  8  8]
 [15  4 15 15]
 [10  4  1 11]
 [10 11  8  7]]
eigenvalues, eigenvector = np.linalg.eig(x)
print(f'The eigenvalues is :{eigenvalues}')
The eigenvalues is :[40.5540978 +0.j          3.50398456+0.j         -7.02904118+3.85535965j
 -7.02904118-3.85535965j]
print(f'The eigenvector is :{eigenvector}')
The eigenvector is :[[ 0.60467664+0.j          0.72539315+0.j          0.23144821+0.12760571j
   0.23144821-0.12760571j]
 [ 0.56855067+0.j         -0.37000357+0.j         -0.62284401+0.j
  -0.62284401-0.j        ]
 [ 0.33449886+0.j         -0.15334886+0.j         -0.01705819-0.61353409j
  -0.01705819+0.61353409j]
 [ 0.4463483 +0.j         -0.55980913+0.j          0.24356813+0.32584254j
   0.24356813-0.32584254j]]

20.  Create a 1D array of 27 elements and reshape it into a 3x3x3 3D array. Flatten it back into a 1D array and compare the flattened array 
with the original. 
x = np.random.uniform(1,100,27)
y = x.reshape(3,3,3)
z = y.flatten()
print(f'The orginal 1D array : {x}')
print(f'After reshaping into 3D array : {y}')
print(f'The flatten array is : {z} comparing with orignal one : {x}')
The orginal 1D array : [ 1.32580681 71.83651397 39.83230504 71.26684031 43.35242887 14.7229845
 80.27619003 37.48366313 99.43059191 33.67122437 98.16514754 19.9063456
 77.46204691 24.29776791 74.14132195 32.33109173 62.35080979 47.44726513
  5.91788791 95.074863   82.90050871 29.8118672  96.48908982 40.15947297
 12.89030648 58.86406338 43.7322609 ]
After reshaping into 3D array : [[[ 1.32580681 71.83651397 39.83230504]
  [71.26684031 43.35242887 14.7229845 ]
  [80.27619003 37.48366313 99.43059191]]

 [[33.67122437 98.16514754 19.9063456 ]
  [77.46204691 24.29776791 74.14132195]
  [32.33109173 62.35080979 47.44726513]]

 [[ 5.91788791 95.074863   82.90050871]
  [29.8118672  96.48908982 40.15947297]
  [12.89030648 58.86406338 43.7322609 ]]]
The flatten array is : [ 1.32580681 71.83651397 39.83230504 71.26684031 43.35242887 14.7229845
 80.27619003 37.48366313 99.43059191 33.67122437 98.16514754 19.9063456
 77.46204691 24.29776791 74.14132195 32.33109173 62.35080979 47.44726513
  5.91788791 95.074863   82.90050871 29.8118672  96.48908982 40.15947297
 12.89030648 58.86406338 43.7322609 ] comparing with orignal one : [ 1.32580681 71.83651397 39.83230504 71.26684031 43.35242887 14.7229845
 80.27619003 37.48366313 99.43059191 33.67122437 98.16514754 19.9063456
 77.46204691 24.29776791 74.14132195 32.33109173 62.35080979 47.44726513
  5.91788791 95.074863   82.90050871 29.8118672  96.48908982 40.15947297
 12.89030648 58.86406338 43.7322609 ]

21.Perform matrix multiplication of two 2D arrays using np.dot () and @. Compare the results and performance of both methods using a large 
dataset. 

import numpy as np
import time
x = np.random.rand(1000,1000)
y = np.random.rand(1000,1000)
start_time = time.time()
dot_product = np.dot(x,y)
end_time = time.time()
print(f'the time required for calculating dot product is {end_time - start_time} seconds ')

start_time1 = time.time()
result = x @ y
end_time1 = time.time()
print(f'the time required for matrix multiplication is {end_time1 - start_time1} seconds')
if np.allclose(dot_product, result):
    print(f'the results are same')
else:
    print(f'the results are differ')
the time required for calculating dot product is 0.07812213897705078 seconds 
the time required for matrix multiplication is 0.07811641693115234 seconds
the results are same.

22. Create a 3D array of shape (2, 1, 4) and a 2D array of shape (4, 1). Perform an element-wise operation using broadcasting and explain the result. Use np. new axis to achieve the same result without broadcasting. 
import numpy as np
x = np.random.randint(10,size = (2,1,4))
y = np.array([[1],[2],[3],[56]])
result = x + y.T
print(result)

# using np.newaxis without broadcasting
a = np.random.randint(10,size = (2,1,4))
b = np.array([[1],[2],[3],[56]]).T[np.newaxis,: , :]
result  = a + b
print(result)

23. Generate a 2D array of random floats between 0 and 1. Use conditional operators to create a Boolean mask for values less than 0.5. 
Replace these values with their squares and leave the rest unchanged. 
x = np.random.rand(5)
print(x)
[0.6717278  0.09197224 0.65413339 0.03597192 0.80228996]
mask = x<0.5
print(mask)
[False  True False  True False]
x[mask] = x[mask]**2
print(x)
[0.6717278  0.00845889 0.65413339 0.00129398 0.80228996]

24. Given a 5x5 array of sequential integers, use slicing to: 
o Extract the diagonal elements 
import numpy as np
x = np.random.randint(20, size =(5,5))
print(x)
diagonal_elements = x.diagonal()
print(diagonal_elements)

o Replace the elements of the middle row with zeros 
x[1:4 , 0: ] = 0
print(x)

o Flip the array vertically and horizontally 
x[ : : -1, : : -1]

25.  Create a 4D array of shape (2, 3, 4, 5) with random integers. Use advanced slicing to extract a subarray and compute the mean along a 
specified axis. 
x  = np.random.randint(50 , size =(2,3,4,5))
print(x)
y = x[1][1][ :, 0:3]
print(y)
z = np.mean(y, axis= 1)
print(z)

26. Given an array of shape (10, 20), reshape it to (20, 10) and (5, 40). Discuss the impact on the array's shape, size, and dimensionality.
x = np.arange(10*20).reshape(10,20)
y = x.reshape(20,10)
z = x.reshape(5,40)
print(x.shape) - (10,20)
print(y.shape) - (20,10)
print(z.shape) - (5,40)
print(x.size) - 200
print(y.size) - 200
print(z.size) - 200
print(x.ndim) - 2
print(y.ndim) - 2
print(z.ndim) - 2
Shape of all the three arrays will change as we see above result because their arrangement is changed,  but the size and ndim will remain the same because the number of elements will remain the same in all the three conditions.

27. Generate a large 2D array and demonstrate the use of np. reshape () and unravel () to manipulate its shape for various linear algebra operations. 
import numpy as np
x = np.random.randint(1,100,(100,100))
y = x.reshape(1000,10)
z = np.ravel(y)
a = z.reshape(100,100)
b = np.dot(a,a.T)

28. Given a 6x6 matrix, use advanced indexing and slicing to extract the upper triangular part of the matrix and set the lower triangular part to zero. Verify the result.
x = np.random.randint(1,100,(6,6))
print(x)
y = np.triu(x)
x[  : ] = y
print(x)
mask = np.tril(np.ones(x.shape),-1).astype(bool)
print(x[mask])


